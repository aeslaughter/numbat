{
    "docs": [
        {
            "location": "/", 
            "text": "Numbat\n\n\nVersion: 2a8febd (30/03/2016)\n\n\nHigh-resolution simulations of density-driven convective mixing in porous media\n\n\nNumbat is a massively-parallel code for high-resolution simulations of\ndensity-driven convective mixing in porous media built using the \nMOOSE framework\n.\n\n\nDensity-driven convective mixing in a porous medium", 
            "title": "Overview"
        }, 
        {
            "location": "/#numbat", 
            "text": "Version: 2a8febd (30/03/2016)", 
            "title": "Numbat"
        }, 
        {
            "location": "/#high-resolution-simulations-of-density-driven-convective-mixing-in-porous-media", 
            "text": "Numbat is a massively-parallel code for high-resolution simulations of\ndensity-driven convective mixing in porous media built using the  MOOSE framework .  Density-driven convective mixing in a porous medium", 
            "title": "High-resolution simulations of density-driven convective mixing in porous media"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Installation instructions\n\n\nTo install Numbat, follow these simple instructions.\n\n\nInstall MOOSE\n\n\nNumbat is based on the MOOSE framework, so the first step is to install\nMOOSE. For detailed installation instructions depending on your\nhardware, see \nwww.mooseframework.com\n.\n\n\nClone Numbat\n\n\nThe next step is to clone the Numbat repository to your local machine.\n\n\nIn the following, it is assumed that MOOSE was installed to the\ndirectory \n\\~/projects.\n If MOOSE was installed to a different\ndirectory, the following instructions must be modified accordingly.\n\n\nTo clone Numbat, use the following commands\n\n\ncd ~/projects\ngit clone https://github.com/cpgr/numbat.git\ncd numbat\ngit checkout master\n\n\n\nCompile Numbat\n\n\nNext, compile Numbat using\n\n\nmake -jn\n\n\n\nwhere \nn\n is the number of processing cores on the computer. If\neverything has gone well, Numbat should compile without error, producing\na binary named \nnumbat-opt\n.\n\n\nTest Numbat\n\n\nFinally, to test that the installation worked, the test suite can be run\nusing\n\n\n./run_tests -jn\n\n\n\nwhere \nn\n is the number of processing cores on the computer.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#installation-instructions", 
            "text": "To install Numbat, follow these simple instructions.", 
            "title": "Installation instructions"
        }, 
        {
            "location": "/getting-started/#install-moose", 
            "text": "Numbat is based on the MOOSE framework, so the first step is to install\nMOOSE. For detailed installation instructions depending on your\nhardware, see  www.mooseframework.com .", 
            "title": "Install MOOSE"
        }, 
        {
            "location": "/getting-started/#clone-numbat", 
            "text": "The next step is to clone the Numbat repository to your local machine.  In the following, it is assumed that MOOSE was installed to the\ndirectory  \\~/projects.  If MOOSE was installed to a different\ndirectory, the following instructions must be modified accordingly.  To clone Numbat, use the following commands  cd ~/projects\ngit clone https://github.com/cpgr/numbat.git\ncd numbat\ngit checkout master", 
            "title": "Clone Numbat"
        }, 
        {
            "location": "/getting-started/#compile-numbat", 
            "text": "Next, compile Numbat using  make -jn  where  n  is the number of processing cores on the computer. If\neverything has gone well, Numbat should compile without error, producing\na binary named  numbat-opt .", 
            "title": "Compile Numbat"
        }, 
        {
            "location": "/getting-started/#test-numbat", 
            "text": "Finally, to test that the installation worked, the test suite can be run\nusing  ./run_tests -jn  where  n  is the number of processing cores on the computer.", 
            "title": "Test Numbat"
        }, 
        {
            "location": "/governing-equations/", 
            "text": "Background theory\n\n\nGoverning equations\n\n\nNumbat implements the Boussinesq approximation to model density-driven\nconvective mixing in porous media.\n\n\nThe governing equations for density-driven flow in porous media are\nDarcy's law\n\\begin{equation}\n\\mathbf{u} = - \\frac{\\mathbf{K}}{\\mu} \\left(\\nabla P + \\rho(c) g \\hat{\\mathbf{k}} \\right),\n\\label{eq:darcy}\n\\end{equation}\nwhere $\\mathbf{u} = (u, v, w)$ is the velocity vector, $\\mathbf{K}$ is\npermeability, $\\mu$ is the fluid viscosity, $P$ is the fluid pressure,\n$\\rho(c)$ is the fluid density as a function of solute concentration\n$c$, $g$ is gravity, and $\\hat{\\mathbf{k}}$ is the unit vector in the\n$z$ direction.\n\n\nThe fluid velocity must also satisfy the continuity equation\n\\begin{equation}\n\\nabla \\cdot \\mathbf{u} = 0,\n\\end{equation}\nand the solute concentration is governed by the convection - diffusion\nequation\n\n\n\\begin{equation}\n\\phi \\frac{\\partial c}{\\partial t} + \\mathbf{u} \\cdot \\nabla c = \\phi D \\nabla^2 c,\n\\label{eq:convdiff}\n\\end{equation}\nwhere $\\phi$ is the porosity, $t$ is time and $D$ is the diffusivity.\n\n\nDarcy's law and the convection-diffusion equations are coupled through\nthe fluid density, which is given by\n\\begin{equation}\n\\rho(c) = \\rho_0 + \\frac{c}{c_0} \\Delta \\rho,\n\\label{eq:density}\n\\end{equation}\nwhere $c_0$ is the equilibrium concentration, and $\\Delta \\rho$ is the\nincrease in density of the fluid at equilibrium concentration.\n\n\nThe boundary conditions are\n\\begin{align}\nw = 0,\n  \\quad z = 0, -H, \\\\\n\\frac{\\partial c}{\\partial z} = 0,\n \\quad z = -H, \\\\\nc = c_0,\n \\quad z = 0,\n\\end{align}\nwhich correspond to impermeable boundary conditions at the top and\nbottom boundaries, given by $z = 0$ and $z=-H$, respectively, and a\nsaturated condition at the top boundary.\n\n\nInitially, there is no solute in the model\n\\begin{equation}\nc = 0, \\quad t = 0.\n\\end{equation}\nThe governing equations are solved using a streamfunction formulation in\n2D and a vector potential formulation in 3D. As a result, we shall\nconsider the two cases separately.\n\n\n2D solution\n\n\nIf we consider an anisotropic model, with vertical and horizontal\npermeabilities given by $k_z$ and $k_x$, respectively, we can\nnon-dimensionalise the governing equations in 2D following \nEnnis-King\n\net. al\n (2005)\n. Defining the anisotropy\nratio $\\gamma$ as\n\\begin{equation}\n\\gamma = \\frac{k_z}{k_x},\n\\label{eq:gamma}\n\\end{equation}\nwe scale the variables using\n\\begin{align}\nx = \\frac{\\phi \\mu D}{k_z \\Delta \\rho g \\gamma^{1/2}} \\hat{x}, \\quad z =  \\frac{\\phi \\mu D}{k_z \\Delta \\rho g} \\hat{z}, \\quad u = \\frac{k_z \\Delta \\rho g}{\\mu \\gamma^{1/2}} \\hat{u}, \\quad w = \\frac{k_z \\Delta \\rho g}{\\mu} \\hat{w} \\nonumber \\\\\nt = \\left(\\frac{\\phi \\mu}{k_z \\Delta \\rho g}\\right)^2 \\hat{t}, \\quad c = c_0 \\hat{c}, \\quad P = \\frac{\\mu \\phi D}{k_z}\\hat{P}, \\qquad \\qquad \\qquad\n\\label{eq:scales}\n\\end{align}\nwhere $\\hat{x}$ refers to a dimensionless variable. The governing\nequations in dimensionless form are then\n\\begin{align}\n\\mathbf{u} = \n - \\left(\\nabla P + c \\mathbf{\\hat{k}}\\right), \\label{eq:darcydim} \\\\\n\\mathbf{u} = \n \\,0, \\label{eq:ctydim} \\\\\n\\frac{\\partial c}{\\partial t} + \\mathbf{u} \\cdot \\nabla c = \n\\,  \\gamma \\frac{\\partial^2 c}{\\partial x^2} + \\frac{\\partial^2 c}{\\partial z^2}, \\label{eq:condiffdim}\n\\end{align}\nwhere we have dropped the hat on the dimensionless variables for\nbrevity.\n\n\nThe dimensionless boundary conditions are\n\\begin{align}\nw = 0,\n  \\quad z = 0, -Ra, \\label{eq:dimbc1} \\\\\n\\frac{\\partial c}{\\partial z} = 0,\n \\quad z = -Ra, \\label{eq:dimbc2} \\\\\nc = 1,\n \\quad z = 0, \\label{eq:dimbc3}\n\\end{align}\nwhere $Ra$ is the Rayleigh number, defined as\n\\begin{equation}\nRa = \\frac{k_z \\Delta \\rho g H}{\\phi \\mu D}.\n\\label{eq:ra}\n\\end{equation}\nIn this form, the Rayleigh number only appears in the boundary\nconditions as the location of the lower boundary. Therefore, $Ra$ can be\ninterpreted in this formalism as a dimensionless model height, and can\nbe varied in simulations by simply changing the height of the mesh.\n\n\nFinally, the dimensionless initial condition is\n\\begin{equation}\nc = 0, \\quad t = 0.\n\\label{eq:ic}\n\\end{equation}\nFor isotropic models, where $k_x = k_z$ and hence $\\gamma = 1$, we\nrecover the dimensionless equations given by \nSlim\n(2014)\n.\n\n\nThe coupled governing equations must be solved numerically. To simplify\nthe numerical analysis, we introduce the streamfunction $\\psi(x,z,t)$\nsuch that\n\\begin{equation}\nu = - \\frac{\\partial \\psi}{\\partial z}, \\quad w = \\frac{\\partial \\psi}{\\partial x}.\n\\label{eq:2Dstreamfunction}\n\\end{equation}\nThis definition satisfies the continuity equation, Eq.\n(\\ref{eq:ctydim}), immediately.\n\n\nThe pressure $P$ is removed from Eq. (\\ref{eq:darcydim}) by taking the\ncurl of both sides and noting that $\\nabla \\times \\nabla P = 0$ for any\n$P$, to give\n\\begin{equation}\n\\nabla^2 \\psi = - \\frac{\\partial c}{\\partial x},\n\\label{eq:darcypsi}\n\\end{equation}\nwhere we have introduced the streamfunction $\\psi$ using Eq.\n(\\ref{eq:2Dstreamfunction}).\n\n\nThe convection-diffusion equation, Eq. (\\ref{eq:condiffdim}) becomes\n\\begin{equation}\\frac{\\partial c}{\\partial t} - \\frac{\\partial \\psi}{\\partial z} \\frac{\\partial c}{\\partial x} + \\frac{\\partial \\psi}{\\partial x} \\frac{\\partial c}{\\partial z} = \\gamma \\frac{\\partial^2 c}{\\partial x^2} + \\frac{\\partial^2 c}{\\partial z}.\n\\label{eq:condiffpsi}\n\\end{equation}\nThe boundary conditions become\n\\begin{align}\n\\frac{\\partial \\psi}{\\partial x} = 0,\n  \\quad z = 0, -Ra, \\\\\n\\frac{\\partial c}{\\partial z} = 0,\n \\quad z = -Ra, \\\\\nc = 1,\n \\quad z = 0,\n\\label{eq:bcpsi}\n\\end{align}\nwhile the initial condition is still given by Eq. (\\ref{eq:ic}).\n\n\nIn two dimensions, Numbat solves Eq's. (\\ref{eq:darcypsi}) and\n(\\ref{eq:condiffpsi}).\n\n\n3D solution\n\n\nWe now consider the case of a three-dimensional model. For simplicity,\nwe consider the case where all lateral permeabilities are equal\n($k_y = k_x$). The governing equations for the 3D model are identical to\nthe 2D model. In dimensionless form, they are given by Eq's.\n(\\ref{eq:darcydim}) to (\\ref{eq:condiffdim}), with boundary conditions\ngiven by Eq's. (\\ref{eq:dimbc1}) to (\\ref{eq:dimbc3}), and initial\ncondition given by Eq. (\\ref{eq:ic}).\n\n\nTo solve these governing equations in 3D, a different approach must be\nused as the streamfunction $\\psi$ is not defined in three dimensions.\nInstead, we define a vector potential $\\Psi = (\\psi_x, \\psi_y, \\psi_z)$\nsuch that\n\\begin{equation}\n\\mathbf{u} = \\nabla \\times \\Psi.\n\\label{eq:Psi}\n\\end{equation}\nIt is important to note that the vector potential is only known up to\nthe addition of the gradient of a scalar $\\zeta$ as\n\\begin{equation}\n\\nabla \\times \\left( \\Psi + \\nabla \\zeta \\right) = \\nabla \\times \\Psi \\quad \\forall \\zeta,\n\\end{equation}\nas $\\nabla \\times \\nabla \\zeta = 0$ for any scalar $\\zeta$. This\nuncertainty is referred to as guage freedom, and is common in\nelectrodynamics. Taking the curl of Eq. (\\ref{eq:darcydim}) and\nsubstituting Eq. (\\ref{eq:Psi}), we have\n\\begin{equation}\n\\nabla(\\nabla \\cdot \\Psi) - \\nabla^2 \\Psi = \\left(- \\frac{\\partial c}{\\partial y}, \\frac{\\partial c}{\\partial x}, 0\\right),\n\\end{equation}\nwhere we have again used the fact that $\\nabla \\times \\nabla P = 0$. If\nwe choose $\\nabla \\cdot \\Psi = 0$ to specify the guage condition, this\nsimplifies to\n\\begin{equation}\n\\nabla^2 \\Psi = \\left(\\frac{\\partial c}{\\partial y},  -\\frac{\\partial c}{\\partial x}, 0\\right).\n\\label{eq:poisson}\n\\end{equation}\nAs shown in \nE and Liu (1997)\n,\n$\\nabla \\cdot \\Psi = 0$ is satisfied throughout the domain if\n\\begin{align}\n\\psi_x = \\psi_y = 0,\n \\quad z = 0, -Ra, \\nonumber \\\n\\frac{\\partial \\psi_z}{\\partial z} = 0, \n \\quad  z = 0, -Ra.\n\\end{align}\nThe governing equations are then\n\\begin{align}\n\\nabla^2 \\Psi = \\,\n \\left(\\frac{\\partial c}{\\partial y}, -\\frac{\\partial c}{\\partial x}, 0 \\right), \\label{eq:darcy3d} \\\\\n\\frac{\\partial c}{\\partial t} + \\mathbf{u} \\cdot \\nabla c = \\, \n \\gamma \\left( \\frac{\\partial^2 c}{\\partial x^2} + \\frac{\\partial^2 c}{\\partial y^2} \\right) + \\frac{\\partial^2 c}{\\partial z^2}, \\label{eq:convdiff3d}\n\\end{align}\nwhere the continuity is satisfied automatically because\n$\\nabla \\cdot \\left( \\nabla \\times \\Psi \\right) = 0$ for any $\\Psi$.\n\n\nFinally, it is straightforward to show that $\\psi_z = 0$ in order to\nsatisfy $\\nabla^2 \\psi_z = 0$ and\n$\\frac{\\partial \\psi_z}{\\partial z} = 0$, which means that the vector\npotential has only $x$ and $y$ components,\n\\begin{equation}\n\\Psi = (\\psi_x, \\psi_y, 0),\n\\end{equation}\nand therefore the fluid velocity $\\mathbf{u} = (u, v, w)$ is\n\\begin{equation}\n\\mathbf{u} = \\left( -\\frac{\\partial \\psi_y}{\\partial z}, \\frac{\\partial \\psi_x}{\\partial z}, \\frac{\\partial \\psi_y}{\\partial x} - \\frac{\\partial \\psi_x}{\\partial y} \\right).\n\\end{equation}\nNote that if there is no $y$ dependence, Eq's. (\\ref{eq:darcy3d}) and\n(\\ref{eq:convdiff3d}) reduce to\n\\begin{align}\n\\nabla^2 \\Psi = \\, \n \\left(0, -\\frac{\\partial c}{\\partial x}, 0 \\right), \\\\\n\\frac{\\partial c}{\\partial t} + \\mathbf{u} \\cdot \\nabla c = \\, \n \\gamma \\frac{\\partial^2 c}{\\partial x^2}  + \\frac{\\partial^2 c}{\\partial z^2}.\n\\end{align}\nIt is simple to show that $\\nabla^2 \\psi_x = 0$ and $\\psi_x = 0$ at\n$z = 0, -Ra$ are only satisfied if $\\psi_x = 0$ in the entire domain. In\nthis case, the governing equations reduce to the two-dimensional\nformulation, as expected.\n\n\nIn three dimensions, Numbat solves Eq's. (\\ref{eq:darcy3d}) and\n(\\ref{eq:convdiff3d}).", 
            "title": "Theory"
        }, 
        {
            "location": "/governing-equations/#background-theory", 
            "text": "", 
            "title": "Background theory"
        }, 
        {
            "location": "/governing-equations/#governing-equations", 
            "text": "Numbat implements the Boussinesq approximation to model density-driven\nconvective mixing in porous media.  The governing equations for density-driven flow in porous media are\nDarcy's law\n\\begin{equation}\n\\mathbf{u} = - \\frac{\\mathbf{K}}{\\mu} \\left(\\nabla P + \\rho(c) g \\hat{\\mathbf{k}} \\right),\n\\label{eq:darcy}\n\\end{equation}\nwhere $\\mathbf{u} = (u, v, w)$ is the velocity vector, $\\mathbf{K}$ is\npermeability, $\\mu$ is the fluid viscosity, $P$ is the fluid pressure,\n$\\rho(c)$ is the fluid density as a function of solute concentration\n$c$, $g$ is gravity, and $\\hat{\\mathbf{k}}$ is the unit vector in the\n$z$ direction.  The fluid velocity must also satisfy the continuity equation\n\\begin{equation}\n\\nabla \\cdot \\mathbf{u} = 0,\n\\end{equation}\nand the solute concentration is governed by the convection - diffusion\nequation  \\begin{equation}\n\\phi \\frac{\\partial c}{\\partial t} + \\mathbf{u} \\cdot \\nabla c = \\phi D \\nabla^2 c,\n\\label{eq:convdiff}\n\\end{equation}\nwhere $\\phi$ is the porosity, $t$ is time and $D$ is the diffusivity.  Darcy's law and the convection-diffusion equations are coupled through\nthe fluid density, which is given by\n\\begin{equation}\n\\rho(c) = \\rho_0 + \\frac{c}{c_0} \\Delta \\rho,\n\\label{eq:density}\n\\end{equation}\nwhere $c_0$ is the equilibrium concentration, and $\\Delta \\rho$ is the\nincrease in density of the fluid at equilibrium concentration.  The boundary conditions are\n\\begin{align}\nw = 0,   \\quad z = 0, -H, \\\\\n\\frac{\\partial c}{\\partial z} = 0,  \\quad z = -H, \\\\\nc = c_0,  \\quad z = 0,\n\\end{align}\nwhich correspond to impermeable boundary conditions at the top and\nbottom boundaries, given by $z = 0$ and $z=-H$, respectively, and a\nsaturated condition at the top boundary.  Initially, there is no solute in the model\n\\begin{equation}\nc = 0, \\quad t = 0.\n\\end{equation}\nThe governing equations are solved using a streamfunction formulation in\n2D and a vector potential formulation in 3D. As a result, we shall\nconsider the two cases separately.", 
            "title": "Governing equations"
        }, 
        {
            "location": "/governing-equations/#2d-solution", 
            "text": "If we consider an anisotropic model, with vertical and horizontal\npermeabilities given by $k_z$ and $k_x$, respectively, we can\nnon-dimensionalise the governing equations in 2D following  Ennis-King et. al  (2005) . Defining the anisotropy\nratio $\\gamma$ as\n\\begin{equation}\n\\gamma = \\frac{k_z}{k_x},\n\\label{eq:gamma}\n\\end{equation}\nwe scale the variables using\n\\begin{align}\nx = \\frac{\\phi \\mu D}{k_z \\Delta \\rho g \\gamma^{1/2}} \\hat{x}, \\quad z =  \\frac{\\phi \\mu D}{k_z \\Delta \\rho g} \\hat{z}, \\quad u = \\frac{k_z \\Delta \\rho g}{\\mu \\gamma^{1/2}} \\hat{u}, \\quad w = \\frac{k_z \\Delta \\rho g}{\\mu} \\hat{w} \\nonumber \\\\\nt = \\left(\\frac{\\phi \\mu}{k_z \\Delta \\rho g}\\right)^2 \\hat{t}, \\quad c = c_0 \\hat{c}, \\quad P = \\frac{\\mu \\phi D}{k_z}\\hat{P}, \\qquad \\qquad \\qquad\n\\label{eq:scales}\n\\end{align}\nwhere $\\hat{x}$ refers to a dimensionless variable. The governing\nequations in dimensionless form are then\n\\begin{align}\n\\mathbf{u} =   - \\left(\\nabla P + c \\mathbf{\\hat{k}}\\right), \\label{eq:darcydim} \\\\\n\\mathbf{u} =   \\,0, \\label{eq:ctydim} \\\\\n\\frac{\\partial c}{\\partial t} + \\mathbf{u} \\cdot \\nabla c =  \\,  \\gamma \\frac{\\partial^2 c}{\\partial x^2} + \\frac{\\partial^2 c}{\\partial z^2}, \\label{eq:condiffdim}\n\\end{align}\nwhere we have dropped the hat on the dimensionless variables for\nbrevity.  The dimensionless boundary conditions are\n\\begin{align}\nw = 0,   \\quad z = 0, -Ra, \\label{eq:dimbc1} \\\\\n\\frac{\\partial c}{\\partial z} = 0,  \\quad z = -Ra, \\label{eq:dimbc2} \\\\\nc = 1,  \\quad z = 0, \\label{eq:dimbc3}\n\\end{align}\nwhere $Ra$ is the Rayleigh number, defined as\n\\begin{equation}\nRa = \\frac{k_z \\Delta \\rho g H}{\\phi \\mu D}.\n\\label{eq:ra}\n\\end{equation}\nIn this form, the Rayleigh number only appears in the boundary\nconditions as the location of the lower boundary. Therefore, $Ra$ can be\ninterpreted in this formalism as a dimensionless model height, and can\nbe varied in simulations by simply changing the height of the mesh.  Finally, the dimensionless initial condition is\n\\begin{equation}\nc = 0, \\quad t = 0.\n\\label{eq:ic}\n\\end{equation}\nFor isotropic models, where $k_x = k_z$ and hence $\\gamma = 1$, we\nrecover the dimensionless equations given by  Slim\n(2014) .  The coupled governing equations must be solved numerically. To simplify\nthe numerical analysis, we introduce the streamfunction $\\psi(x,z,t)$\nsuch that\n\\begin{equation}\nu = - \\frac{\\partial \\psi}{\\partial z}, \\quad w = \\frac{\\partial \\psi}{\\partial x}.\n\\label{eq:2Dstreamfunction}\n\\end{equation}\nThis definition satisfies the continuity equation, Eq.\n(\\ref{eq:ctydim}), immediately.  The pressure $P$ is removed from Eq. (\\ref{eq:darcydim}) by taking the\ncurl of both sides and noting that $\\nabla \\times \\nabla P = 0$ for any\n$P$, to give\n\\begin{equation}\n\\nabla^2 \\psi = - \\frac{\\partial c}{\\partial x},\n\\label{eq:darcypsi}\n\\end{equation}\nwhere we have introduced the streamfunction $\\psi$ using Eq.\n(\\ref{eq:2Dstreamfunction}).  The convection-diffusion equation, Eq. (\\ref{eq:condiffdim}) becomes\n\\begin{equation}\\frac{\\partial c}{\\partial t} - \\frac{\\partial \\psi}{\\partial z} \\frac{\\partial c}{\\partial x} + \\frac{\\partial \\psi}{\\partial x} \\frac{\\partial c}{\\partial z} = \\gamma \\frac{\\partial^2 c}{\\partial x^2} + \\frac{\\partial^2 c}{\\partial z}.\n\\label{eq:condiffpsi}\n\\end{equation}\nThe boundary conditions become\n\\begin{align}\n\\frac{\\partial \\psi}{\\partial x} = 0,   \\quad z = 0, -Ra, \\\\\n\\frac{\\partial c}{\\partial z} = 0,  \\quad z = -Ra, \\\\\nc = 1,  \\quad z = 0,\n\\label{eq:bcpsi}\n\\end{align}\nwhile the initial condition is still given by Eq. (\\ref{eq:ic}).  In two dimensions, Numbat solves Eq's. (\\ref{eq:darcypsi}) and\n(\\ref{eq:condiffpsi}).", 
            "title": "2D solution"
        }, 
        {
            "location": "/governing-equations/#3d-solution", 
            "text": "We now consider the case of a three-dimensional model. For simplicity,\nwe consider the case where all lateral permeabilities are equal\n($k_y = k_x$). The governing equations for the 3D model are identical to\nthe 2D model. In dimensionless form, they are given by Eq's.\n(\\ref{eq:darcydim}) to (\\ref{eq:condiffdim}), with boundary conditions\ngiven by Eq's. (\\ref{eq:dimbc1}) to (\\ref{eq:dimbc3}), and initial\ncondition given by Eq. (\\ref{eq:ic}).  To solve these governing equations in 3D, a different approach must be\nused as the streamfunction $\\psi$ is not defined in three dimensions.\nInstead, we define a vector potential $\\Psi = (\\psi_x, \\psi_y, \\psi_z)$\nsuch that\n\\begin{equation}\n\\mathbf{u} = \\nabla \\times \\Psi.\n\\label{eq:Psi}\n\\end{equation}\nIt is important to note that the vector potential is only known up to\nthe addition of the gradient of a scalar $\\zeta$ as\n\\begin{equation}\n\\nabla \\times \\left( \\Psi + \\nabla \\zeta \\right) = \\nabla \\times \\Psi \\quad \\forall \\zeta,\n\\end{equation}\nas $\\nabla \\times \\nabla \\zeta = 0$ for any scalar $\\zeta$. This\nuncertainty is referred to as guage freedom, and is common in\nelectrodynamics. Taking the curl of Eq. (\\ref{eq:darcydim}) and\nsubstituting Eq. (\\ref{eq:Psi}), we have\n\\begin{equation}\n\\nabla(\\nabla \\cdot \\Psi) - \\nabla^2 \\Psi = \\left(- \\frac{\\partial c}{\\partial y}, \\frac{\\partial c}{\\partial x}, 0\\right),\n\\end{equation}\nwhere we have again used the fact that $\\nabla \\times \\nabla P = 0$. If\nwe choose $\\nabla \\cdot \\Psi = 0$ to specify the guage condition, this\nsimplifies to\n\\begin{equation}\n\\nabla^2 \\Psi = \\left(\\frac{\\partial c}{\\partial y},  -\\frac{\\partial c}{\\partial x}, 0\\right).\n\\label{eq:poisson}\n\\end{equation}\nAs shown in  E and Liu (1997) ,\n$\\nabla \\cdot \\Psi = 0$ is satisfied throughout the domain if\n\\begin{align}\n\\psi_x = \\psi_y = 0,  \\quad z = 0, -Ra, \\nonumber \\\n\\frac{\\partial \\psi_z}{\\partial z} = 0,   \\quad  z = 0, -Ra.\n\\end{align}\nThe governing equations are then\n\\begin{align}\n\\nabla^2 \\Psi = \\,  \\left(\\frac{\\partial c}{\\partial y}, -\\frac{\\partial c}{\\partial x}, 0 \\right), \\label{eq:darcy3d} \\\\\n\\frac{\\partial c}{\\partial t} + \\mathbf{u} \\cdot \\nabla c = \\,   \\gamma \\left( \\frac{\\partial^2 c}{\\partial x^2} + \\frac{\\partial^2 c}{\\partial y^2} \\right) + \\frac{\\partial^2 c}{\\partial z^2}, \\label{eq:convdiff3d}\n\\end{align}\nwhere the continuity is satisfied automatically because\n$\\nabla \\cdot \\left( \\nabla \\times \\Psi \\right) = 0$ for any $\\Psi$.  Finally, it is straightforward to show that $\\psi_z = 0$ in order to\nsatisfy $\\nabla^2 \\psi_z = 0$ and\n$\\frac{\\partial \\psi_z}{\\partial z} = 0$, which means that the vector\npotential has only $x$ and $y$ components,\n\\begin{equation}\n\\Psi = (\\psi_x, \\psi_y, 0),\n\\end{equation}\nand therefore the fluid velocity $\\mathbf{u} = (u, v, w)$ is\n\\begin{equation}\n\\mathbf{u} = \\left( -\\frac{\\partial \\psi_y}{\\partial z}, \\frac{\\partial \\psi_x}{\\partial z}, \\frac{\\partial \\psi_y}{\\partial x} - \\frac{\\partial \\psi_x}{\\partial y} \\right).\n\\end{equation}\nNote that if there is no $y$ dependence, Eq's. (\\ref{eq:darcy3d}) and\n(\\ref{eq:convdiff3d}) reduce to\n\\begin{align}\n\\nabla^2 \\Psi = \\,   \\left(0, -\\frac{\\partial c}{\\partial x}, 0 \\right), \\\\\n\\frac{\\partial c}{\\partial t} + \\mathbf{u} \\cdot \\nabla c = \\,   \\gamma \\frac{\\partial^2 c}{\\partial x^2}  + \\frac{\\partial^2 c}{\\partial z^2}.\n\\end{align}\nIt is simple to show that $\\nabla^2 \\psi_x = 0$ and $\\psi_x = 0$ at\n$z = 0, -Ra$ are only satisfied if $\\psi_x = 0$ in the entire domain. In\nthis case, the governing equations reduce to the two-dimensional\nformulation, as expected.  In three dimensions, Numbat solves Eq's. (\\ref{eq:darcy3d}) and\n(\\ref{eq:convdiff3d}).", 
            "title": "3D solution"
        }, 
        {
            "location": "/input-file-syntax/", 
            "text": "Input file syntax\n\n\nThe input file for a Numbat simulation is a simple, block-structured\ntext file.\n\n\nA working example of a 2D problem can be found at\n\nhttps://github.com/cpgr/numbat/blob/master/examples/2D/2Dddc.i\n\n\nA working example of a 3D problem can be found at\n\nhttps://github.com/cpgr/numbat/blob/master/examples/3D/3Dddc.i\n\n\nEssential input\n\n\nDetails of the minimum input file requirements are given below.\n\n\nMesh\n\n\nAll simulations must feature a mesh. For the basic model with a\nrectangular mesh, the built-in MOOSE \nGeneratedMesh\n can be used to\ncreate a suitable mesh. In 2D, the input block looks like:\n\n\n[Mesh]\n  type = GeneratedMesh\n  dim = 2\n  xmax = 1000\n  ymin = -200\n  ymax = 0\n  nx = 80\n  ny = 20\n  bias_y = 0.7\n[]\n\n\n\nThis creates a 2D mesh from $x = 0$ to $x = 1000$ and $y = -200$ to\n$y = 0$ with 80 elements in the $x$-direction and 20 elements in the\n$y$-direction. It is useful to have a mesh that is more refined at the\ntop of the model, to accurately capture the initially small structure of\nthe convective fingers. This is achieved using the built-in \nbias_y\n\nparameter.\n\n\nIn 3D, the Mesh block would look like:\n\n\n[Mesh]\n  type = GeneratedMesh\n  dim = 3\n  xmax = 200\n  ymax = 200\n  zmin = -200\n  zmax = 0\n  nx = 10\n  ny = 10\n  nz = 10\n  bias_z = 0.7\n[]\n\n\n\nAgain, the mesh is refined at the top of the model using the the\n\nbias_z\n parameter.\n\n\nVariables\n\n\nFor a 2D model, the simulation must have two variables: \nconcentration\n\nand \nstreamfunction\n. This can be implemented in the input file using\nthe following code:\n\n\n[Variables]\n[./concentration]\norder = FIRST\nfamily = LAGRANGE\n  [./InitialCondition]\n    type = PerturbationIC\n    variable = concentration\n    amplitude = 0.01\n    seed = 1\n  [../]\n[../]\n[./streamfunction]\n  order = FIRST\n  family = LAGRANGE\n  initial_condition = 0.0\n[../]\n[]\n\n\n\nInitial conditions can also be specified in the \nVariables\n block. In\nthis case, the initial concentration is perturbed using a\n\nPerturbationIC\n to seed the instability.\n\n\nFor a 3D model, three variables are required: one \nconcentration\n\nvariable and two \nstreamfunction\n variables corresponding to the \nx\n and\n\ny\n components. This can be implemented in the input file using:\n\n\n[Variables]  \n  [./concentration]  \n  [../]  \n  [./streamfunctionx]  \n  [../]  \n  [./streamfunctiony]  \n  [../]  \n[]\n\n\n\nKernels\n\n\nThree kernels are required for a 2D model: a \nDarcyDDC\n kernel for the\n\nstreamfunction\n variable, a \nConvectionDiffusionDDC\n kernel for the\n\nconcentration\n variable, and a \nTimeDerivative\n kernel also for the\n\nconcentration\n variable. An example for an isotropic model is\n\n\n[Kernels]\n  [./TwoDDarcyDDC]\n    type = DarcyDDC\n    variable = streamfunction\n    concentration_variable = concentration\n  [../]\n  [./TwoDConvectionDiffusionDDC]\n    type = ConvectionDiffusionDDC\n    variable = concentration\n    streamfunction_variable = streamfunction\n    coeff_tensor = '1 0 0 0 1 0 0 0 1'\n  [../]\n  [./TimeDerivative]\n    type = TimeDerivative\n    variable = concentration\n  [../]\n[]\n\n\n\nThe \ncoeff_tensor\n parameter in each convective diffusion kernel can be\nmodified. The format of this\n\n\nFor 3D models, an additional \nDarcyDDC\n kernel is required for the\nadditional stream function variable. An example of the kernels block for\na 3D isotropic model is\n\n\n[Kernels]\n  [./ThreeDDarcyDDCx]\n    type = DarcyDDC\n    variable = streamfunctionx\n    concentration_variable = concentration\n    component = x\n  [../]\n  [./ThreeDDarcyDDCy]\n    type = DarcyDDC\n    variable = streamfunctiony\n    concentration_variable = concentration\n    component = y\n  [../]\n  [./ThreeDConvectionDiffusionDDC]\n    type = ConvectionDiffusionDDC\n    variable = concentration\n    streamfunction_variable = 'streamfunctionx streamfunctiony'\n    coeff_tensor = '1 0 0 0 1 0 0 0 1'\n  [../]\n  [./TimeDerivative]\n    type = TimeDerivative\n    variable = concentration\n  [../]\n[]\n\n\n\nIn the 3D case, it is important to note that the \nDarcyDDC\n kernel must\nspecify the component that it applies to, and that the\n\nstreamfunction_variable\n keyword in the \nConvectionDiffusionDDC\n\nkernel must contain both \nstreamfunction\n variables ordered by the \nx\n\ncomponent then the \ny\n component.\n\n\nInitial condition\n\n\nTo seed the instability, a random perturbation to the initial concentration is prescribed using the \nPerturbationIC\n initial condition. This can be applied in the \nVariables\n block in the input file (see above) using\n\n\n[./InitialCondition]\n  type = PerturbationIC\n  variable = concentration\n  amplitude = 0.01\n  seed = 1\n[../]\n\n\n\nThe \nPerturbationIC\n initial condition applies the diffusive concentration profile to the nodes for (scaled) time $t = 1$,\n\\begin{equation}\nc_d(z, t =1) = 1 + \\mathrm{erf}(z /2),\n\\end{equation}\nfor $z \n 0$, where $\\mathrm{erf(z)}$ is the error function.\n\n\nA uniform random perturbation is then added to the diffusive concentration profile, where the amplitude of the perturbation is specified by the input file value \namplitude\n.\n\n\nBoundary conditions\n\n\nAppropriate boundary conditions must be prescribed. Typically, these\nwill be constant concentration at the top of the model domain, periodic\nboundary conditions on the lateral sides (to mimic an infinite\nreservoir), and no-flow boundary conditions at the top and bottom\nsurfaces.\n\n\nIn 2D, this can be achieved using the following input block:\n\n\n[BCs]\n  [./conctop]\n    type = DirichletBC\n    variable = concentration\n    boundary = top\n    value = 1.0\n  [../]\n  [./streamfuntop]\n    type = DirichletBC\n    variable = streamfunction\n    boundary = top\n    value = 0.0\n  [../]\n  [./streamfunbottom]\n    type = DirichletBC\n    variable = streamfunction\n    boundary = bottom\n    value = 0.0\n  [../]\n  [./periodic]\n    [./x]\n      variable = 'concentration streamfunction'\n      auto_direction = x\n    [../]\n  [../]\n[]\n\n\n\nIn this case, the \nconctop\n boundary condition is a Dirichlet condition\nat the top of the model that fixes the value of concentration to unity.\nIt is useful to note that a MOOSE \nGeneratedMesh\n provides descriptive\nnames for the sides of the model (top, bottom, left, right) which can be\nreferenced in the input file. No-flow boundary conditions are prescribed\non the top and bottom surfaces by holding the \nstreamfunction\n variable\nconstant (in this case 0). Finally, periodic boundary conditions are\napplied by the \nperiodic\n block, which specifies that both the\n\nconcentration\n and \nstreamfunction\n variables are periodic on\nboundaries in the $x$-direction.\n\n\nA similar boundary condition block is used in 3D, except that no-flow\nboundaries must be imposed on both streamfunction variables, see below:\n\n\n[BCs]\n  [./conctop]\n    type = DirichletBC\n    variable = concentration\n    boundary = front\n    value = 1.0\n  [../]\n  [./streamfunxtop]\n    type = DirichletBC\n    variable = streamfunctionx\n    boundary = front\n    value = 0.0\n  [../]\n  [./streamfunxbottom]\n    type = DirichletBC\n    variable = streamfunctionx\n    boundary = back\n    value = 0.0\n  [../]\n  [./streamfunytop]\n    type = DirichletBC\n    variable = streamfunctiony\n    boundary = front\n    value = 0.0\n  [../]\n  [./streamfunybottom]\n    type = DirichletBC\n    variable = streamfunctiony\n    boundary = back\n    value = 0.0\n  [../]\n  [./Periodic]\n    [./xy]\n      variable = 'concentration streamfunctionx streamfunctiony'\n      auto_direction = 'x y'\n    [../]\n  [../]\n[]\n\n\n\nExecutioner\n\n\nEach MOOSE simulation must use an \nExecutioner\n, which provides\nparameters for the solve. In both 2D and 3D models, a transient\n\nExecutioner\n is used, an example of which is presented below:\n\n\n[Executioner]\n  type = Transient\n  scheme = bdf2\n  dtmin = 0.1\n  dtmax = 200\n  end_time = 2000\n  solve_type = PJFNK\n  petsc_options_iname = '-ksp_type -pc_type -pc_sub_type'\n  petsc_options_value = 'gmres asm ilu'\n  [./TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 1\n    cutback_factor = 0.5\n    growth_factor = 2\n  [../]\n[]\n\n\n\nExecutioners\n are a standard MOOSE feature that are well documented on\nthe \nMOOSE website\n, so no further detail\nis provided here.\n\n\nPreconditioning\n\n\nA default preconditioning block is used that provides all Jacobian\nentries to aid convergence. This is identical for both 2D and 3D models:\n\n\n[Preconditioning]\n  [./smp]\n    type = SMP\n    full = true\n  [../]\n[]\n\n\n\nThis is a standard MOOSE feature that is documented on the \nMOOSE\nwebsite\n, so no further detail is\nprovided here.\n\n\nOutputs\n\n\nTo provide ouptut from the simulation, an \nOutputs\n block must be\nspecified. An example is\n\n\n[Outputs]\n  [./console]\n    type = Console\n    perf_log = true\n    output_nonlinear = true\n  [../]\n  [./exodus]\n    type = Exodus\n    file_base = filename\n    execute_on = 'INITIAL TIMESTEP_END FINAL'\n  [../]\n[]\n\n\n\nIn this case, some output regarding the iterations is streamed to the\nconsole, while the results are provided in an Exodus file named\n\nfilename.e\n. There are a large number of output options available in\nMOOSE, see the \nMOOSE website\n for\nfurther details.\n\n\nOptional input\n\n\nWhile the above required blocks will enable a Numbat simulation to run,\nthere are a number of optional input blocks that will improve the\nsimulations are increase the amount of rsults provided.\n\n\nMesh adaptivity\n\n\nMOOSE features built-in mesh adaptivity that is extremely useful in\nNumbat simulations. This can be included using:\n\n\n[Adaptivity]\n  marker = combomarker\n  max_h_level = 2\n  initial_marker = boxmarker\n  initial_steps = 1\n  [./Indicators]\n    [./gradjumpindicator]\n      type = GradientJumpIndicator\n      variable = concentration\n    [../]\n  [../]\n  [./Markers]\n    [./errormarker]\n      type = ErrorToleranceMarker\n      coarsen = 0.0025\n      refine = 0.005\n      indicator = gradjumpindicator\n    [../]\n    [./boxmarker]\n      type = BoxMarker\n      bottom_left = '0 -1.0 0'\n      top_right = '1000 0 0'\n      inside = refine\n      outside = dont_mark\n    [../]\n    [./combomarker]\n      type = ComboMarker\n      markers = 'boxmarker errormarker'\n    [../]\n  [../]\n[]\n\n\n\nFor details about mesh adaptivity, see the \nMOOSE\nwebsite\n.\n\n\nFlux at the top boundary\n\n\nThe flux over the top boundary is of particular interest in many cases\n(especially convective mixing of $\\textrm{CO}_2$). This can be\ncalculated at each time step using a \nPostprocessor\n:\n\n\n[Postprocessors]\n  [./boundaryfluxint]\n    type = SideFluxIntegral\n    variable = concentration\n    boundary = top\n    diffusivity = 1\n  [../]\n[]\n\n\n\nThe output of the \nPostprocessor\n can be saved to a \ncsv\n file by\nincluding the following additional sub-block in the \nOutputs\n block:\n\n\n[./csvoutput]\n  type = CSV\n  file_base = filename\n  execute_on = 'INITIAL TIMESTEP_END FINAL'\n[../]\n\n\n\nVelocity components\n\n\nThe velocity components in the $x$ and $y$ directions (in 2D), and $x$,\n$y$, and $z$ directions in 3D can be calculated using the auxiliary\nsystem. These velocity components are calculated using the\nstreamfunction(s), see the governing equations for details.\n\n\nIn the 2D case, two auxiliary variables, $u$ and $w$, can be defined for\nthe horizontal and vertical velocity components, respectively.\nImportantly, these auxiliary variables \nmust\n have constant monomial\nshape functions (these are referred to as \nelemental\n variables, as the\nvalue is constant over each mesh element). This restriction is due to\nthe gradient of the streamfunction variable(s) being undefined for\n\nnodal\n auxiliary variables (for example, those using linear Lagrange\nshape functions). An example of the input syntax for the 2D case is\n\n\n[AuxVariables]\n  [./u]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./w]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n[]\n\n\n\nFor the 3D case, there is an additional horizontal velocity component\n(\nv\n), so the input syntax is\n\n\n[AuxVariables]\n  [./u]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./v]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./w]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n[]\n\n\n\nThe velocity components are calculated by \nVelocityDDCAux\n AuxKernels,\none for each component. For the 2D case, the input syntax is\n\n\n[AuxKernels]\n  [./uAux]\n    type = VelocityDDCAux\n    variable = u\n    component = x\n    streamfunction_variable = streamfunction\n  [../]\n  [./wAux]\n    type = VelocityDDCAux\n    variable = w\n    component = y\n    streamfunction_variable = streamfunction\n  [../]\n[]\n\n\n\nFor the 3D case, three AuxKernels are required. Note that both\nstreamfunction variables must be given, in the correct order ($x$ then\n$y$). An example of the input syntax is\n\n\n[AuxKernels]\n  [./uAux]\n    type = VelocityDDCAux\n    variable = u\n    component = x\n    streamfunction_variable = 'streamfunctionx streamfunctiony'\n  [../]\n  [./vAux]\n    type = VelocityDDCAux\n    variable = v\n    component = y\n    streamfunction_variable = 'streamfunctionx streamfunctiony'\n  [../]\n  [./wAux]\n    type = VelocityDDCAux\n    variable = w\n    component = z\n    streamfunction_variable = 'streamfunctionx streamfunctiony'\n  [../]\n[]", 
            "title": "Syntax"
        }, 
        {
            "location": "/input-file-syntax/#input-file-syntax", 
            "text": "The input file for a Numbat simulation is a simple, block-structured\ntext file.  A working example of a 2D problem can be found at https://github.com/cpgr/numbat/blob/master/examples/2D/2Dddc.i  A working example of a 3D problem can be found at https://github.com/cpgr/numbat/blob/master/examples/3D/3Dddc.i", 
            "title": "Input file syntax"
        }, 
        {
            "location": "/input-file-syntax/#essential-input", 
            "text": "Details of the minimum input file requirements are given below.", 
            "title": "Essential input"
        }, 
        {
            "location": "/input-file-syntax/#mesh", 
            "text": "All simulations must feature a mesh. For the basic model with a\nrectangular mesh, the built-in MOOSE  GeneratedMesh  can be used to\ncreate a suitable mesh. In 2D, the input block looks like:  [Mesh]\n  type = GeneratedMesh\n  dim = 2\n  xmax = 1000\n  ymin = -200\n  ymax = 0\n  nx = 80\n  ny = 20\n  bias_y = 0.7\n[]  This creates a 2D mesh from $x = 0$ to $x = 1000$ and $y = -200$ to\n$y = 0$ with 80 elements in the $x$-direction and 20 elements in the\n$y$-direction. It is useful to have a mesh that is more refined at the\ntop of the model, to accurately capture the initially small structure of\nthe convective fingers. This is achieved using the built-in  bias_y \nparameter.  In 3D, the Mesh block would look like:  [Mesh]\n  type = GeneratedMesh\n  dim = 3\n  xmax = 200\n  ymax = 200\n  zmin = -200\n  zmax = 0\n  nx = 10\n  ny = 10\n  nz = 10\n  bias_z = 0.7\n[]  Again, the mesh is refined at the top of the model using the the bias_z  parameter.", 
            "title": "Mesh"
        }, 
        {
            "location": "/input-file-syntax/#variables", 
            "text": "For a 2D model, the simulation must have two variables:  concentration \nand  streamfunction . This can be implemented in the input file using\nthe following code:  [Variables]\n[./concentration]\norder = FIRST\nfamily = LAGRANGE\n  [./InitialCondition]\n    type = PerturbationIC\n    variable = concentration\n    amplitude = 0.01\n    seed = 1\n  [../]\n[../]\n[./streamfunction]\n  order = FIRST\n  family = LAGRANGE\n  initial_condition = 0.0\n[../]\n[]  Initial conditions can also be specified in the  Variables  block. In\nthis case, the initial concentration is perturbed using a PerturbationIC  to seed the instability.  For a 3D model, three variables are required: one  concentration \nvariable and two  streamfunction  variables corresponding to the  x  and y  components. This can be implemented in the input file using:  [Variables]  \n  [./concentration]  \n  [../]  \n  [./streamfunctionx]  \n  [../]  \n  [./streamfunctiony]  \n  [../]  \n[]", 
            "title": "Variables"
        }, 
        {
            "location": "/input-file-syntax/#kernels", 
            "text": "Three kernels are required for a 2D model: a  DarcyDDC  kernel for the streamfunction  variable, a  ConvectionDiffusionDDC  kernel for the concentration  variable, and a  TimeDerivative  kernel also for the concentration  variable. An example for an isotropic model is  [Kernels]\n  [./TwoDDarcyDDC]\n    type = DarcyDDC\n    variable = streamfunction\n    concentration_variable = concentration\n  [../]\n  [./TwoDConvectionDiffusionDDC]\n    type = ConvectionDiffusionDDC\n    variable = concentration\n    streamfunction_variable = streamfunction\n    coeff_tensor = '1 0 0 0 1 0 0 0 1'\n  [../]\n  [./TimeDerivative]\n    type = TimeDerivative\n    variable = concentration\n  [../]\n[]  The  coeff_tensor  parameter in each convective diffusion kernel can be\nmodified. The format of this  For 3D models, an additional  DarcyDDC  kernel is required for the\nadditional stream function variable. An example of the kernels block for\na 3D isotropic model is  [Kernels]\n  [./ThreeDDarcyDDCx]\n    type = DarcyDDC\n    variable = streamfunctionx\n    concentration_variable = concentration\n    component = x\n  [../]\n  [./ThreeDDarcyDDCy]\n    type = DarcyDDC\n    variable = streamfunctiony\n    concentration_variable = concentration\n    component = y\n  [../]\n  [./ThreeDConvectionDiffusionDDC]\n    type = ConvectionDiffusionDDC\n    variable = concentration\n    streamfunction_variable = 'streamfunctionx streamfunctiony'\n    coeff_tensor = '1 0 0 0 1 0 0 0 1'\n  [../]\n  [./TimeDerivative]\n    type = TimeDerivative\n    variable = concentration\n  [../]\n[]  In the 3D case, it is important to note that the  DarcyDDC  kernel must\nspecify the component that it applies to, and that the streamfunction_variable  keyword in the  ConvectionDiffusionDDC \nkernel must contain both  streamfunction  variables ordered by the  x \ncomponent then the  y  component.", 
            "title": "Kernels"
        }, 
        {
            "location": "/input-file-syntax/#initial-condition", 
            "text": "To seed the instability, a random perturbation to the initial concentration is prescribed using the  PerturbationIC  initial condition. This can be applied in the  Variables  block in the input file (see above) using  [./InitialCondition]\n  type = PerturbationIC\n  variable = concentration\n  amplitude = 0.01\n  seed = 1\n[../]  The  PerturbationIC  initial condition applies the diffusive concentration profile to the nodes for (scaled) time $t = 1$,\n\\begin{equation}\nc_d(z, t =1) = 1 + \\mathrm{erf}(z /2),\n\\end{equation}\nfor $z   0$, where $\\mathrm{erf(z)}$ is the error function.  A uniform random perturbation is then added to the diffusive concentration profile, where the amplitude of the perturbation is specified by the input file value  amplitude .", 
            "title": "Initial condition"
        }, 
        {
            "location": "/input-file-syntax/#boundary-conditions", 
            "text": "Appropriate boundary conditions must be prescribed. Typically, these\nwill be constant concentration at the top of the model domain, periodic\nboundary conditions on the lateral sides (to mimic an infinite\nreservoir), and no-flow boundary conditions at the top and bottom\nsurfaces.  In 2D, this can be achieved using the following input block:  [BCs]\n  [./conctop]\n    type = DirichletBC\n    variable = concentration\n    boundary = top\n    value = 1.0\n  [../]\n  [./streamfuntop]\n    type = DirichletBC\n    variable = streamfunction\n    boundary = top\n    value = 0.0\n  [../]\n  [./streamfunbottom]\n    type = DirichletBC\n    variable = streamfunction\n    boundary = bottom\n    value = 0.0\n  [../]\n  [./periodic]\n    [./x]\n      variable = 'concentration streamfunction'\n      auto_direction = x\n    [../]\n  [../]\n[]  In this case, the  conctop  boundary condition is a Dirichlet condition\nat the top of the model that fixes the value of concentration to unity.\nIt is useful to note that a MOOSE  GeneratedMesh  provides descriptive\nnames for the sides of the model (top, bottom, left, right) which can be\nreferenced in the input file. No-flow boundary conditions are prescribed\non the top and bottom surfaces by holding the  streamfunction  variable\nconstant (in this case 0). Finally, periodic boundary conditions are\napplied by the  periodic  block, which specifies that both the concentration  and  streamfunction  variables are periodic on\nboundaries in the $x$-direction.  A similar boundary condition block is used in 3D, except that no-flow\nboundaries must be imposed on both streamfunction variables, see below:  [BCs]\n  [./conctop]\n    type = DirichletBC\n    variable = concentration\n    boundary = front\n    value = 1.0\n  [../]\n  [./streamfunxtop]\n    type = DirichletBC\n    variable = streamfunctionx\n    boundary = front\n    value = 0.0\n  [../]\n  [./streamfunxbottom]\n    type = DirichletBC\n    variable = streamfunctionx\n    boundary = back\n    value = 0.0\n  [../]\n  [./streamfunytop]\n    type = DirichletBC\n    variable = streamfunctiony\n    boundary = front\n    value = 0.0\n  [../]\n  [./streamfunybottom]\n    type = DirichletBC\n    variable = streamfunctiony\n    boundary = back\n    value = 0.0\n  [../]\n  [./Periodic]\n    [./xy]\n      variable = 'concentration streamfunctionx streamfunctiony'\n      auto_direction = 'x y'\n    [../]\n  [../]\n[]", 
            "title": "Boundary conditions"
        }, 
        {
            "location": "/input-file-syntax/#executioner", 
            "text": "Each MOOSE simulation must use an  Executioner , which provides\nparameters for the solve. In both 2D and 3D models, a transient Executioner  is used, an example of which is presented below:  [Executioner]\n  type = Transient\n  scheme = bdf2\n  dtmin = 0.1\n  dtmax = 200\n  end_time = 2000\n  solve_type = PJFNK\n  petsc_options_iname = '-ksp_type -pc_type -pc_sub_type'\n  petsc_options_value = 'gmres asm ilu'\n  [./TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 1\n    cutback_factor = 0.5\n    growth_factor = 2\n  [../]\n[]  Executioners  are a standard MOOSE feature that are well documented on\nthe  MOOSE website , so no further detail\nis provided here.", 
            "title": "Executioner"
        }, 
        {
            "location": "/input-file-syntax/#preconditioning", 
            "text": "A default preconditioning block is used that provides all Jacobian\nentries to aid convergence. This is identical for both 2D and 3D models:  [Preconditioning]\n  [./smp]\n    type = SMP\n    full = true\n  [../]\n[]  This is a standard MOOSE feature that is documented on the  MOOSE\nwebsite , so no further detail is\nprovided here.", 
            "title": "Preconditioning"
        }, 
        {
            "location": "/input-file-syntax/#outputs", 
            "text": "To provide ouptut from the simulation, an  Outputs  block must be\nspecified. An example is  [Outputs]\n  [./console]\n    type = Console\n    perf_log = true\n    output_nonlinear = true\n  [../]\n  [./exodus]\n    type = Exodus\n    file_base = filename\n    execute_on = 'INITIAL TIMESTEP_END FINAL'\n  [../]\n[]  In this case, some output regarding the iterations is streamed to the\nconsole, while the results are provided in an Exodus file named filename.e . There are a large number of output options available in\nMOOSE, see the  MOOSE website  for\nfurther details.", 
            "title": "Outputs"
        }, 
        {
            "location": "/input-file-syntax/#optional-input", 
            "text": "While the above required blocks will enable a Numbat simulation to run,\nthere are a number of optional input blocks that will improve the\nsimulations are increase the amount of rsults provided.", 
            "title": "Optional input"
        }, 
        {
            "location": "/input-file-syntax/#mesh-adaptivity", 
            "text": "MOOSE features built-in mesh adaptivity that is extremely useful in\nNumbat simulations. This can be included using:  [Adaptivity]\n  marker = combomarker\n  max_h_level = 2\n  initial_marker = boxmarker\n  initial_steps = 1\n  [./Indicators]\n    [./gradjumpindicator]\n      type = GradientJumpIndicator\n      variable = concentration\n    [../]\n  [../]\n  [./Markers]\n    [./errormarker]\n      type = ErrorToleranceMarker\n      coarsen = 0.0025\n      refine = 0.005\n      indicator = gradjumpindicator\n    [../]\n    [./boxmarker]\n      type = BoxMarker\n      bottom_left = '0 -1.0 0'\n      top_right = '1000 0 0'\n      inside = refine\n      outside = dont_mark\n    [../]\n    [./combomarker]\n      type = ComboMarker\n      markers = 'boxmarker errormarker'\n    [../]\n  [../]\n[]  For details about mesh adaptivity, see the  MOOSE\nwebsite .", 
            "title": "Mesh adaptivity"
        }, 
        {
            "location": "/input-file-syntax/#flux-at-the-top-boundary", 
            "text": "The flux over the top boundary is of particular interest in many cases\n(especially convective mixing of $\\textrm{CO}_2$). This can be\ncalculated at each time step using a  Postprocessor :  [Postprocessors]\n  [./boundaryfluxint]\n    type = SideFluxIntegral\n    variable = concentration\n    boundary = top\n    diffusivity = 1\n  [../]\n[]  The output of the  Postprocessor  can be saved to a  csv  file by\nincluding the following additional sub-block in the  Outputs  block:  [./csvoutput]\n  type = CSV\n  file_base = filename\n  execute_on = 'INITIAL TIMESTEP_END FINAL'\n[../]", 
            "title": "Flux at the top boundary"
        }, 
        {
            "location": "/input-file-syntax/#velocity-components", 
            "text": "The velocity components in the $x$ and $y$ directions (in 2D), and $x$,\n$y$, and $z$ directions in 3D can be calculated using the auxiliary\nsystem. These velocity components are calculated using the\nstreamfunction(s), see the governing equations for details.  In the 2D case, two auxiliary variables, $u$ and $w$, can be defined for\nthe horizontal and vertical velocity components, respectively.\nImportantly, these auxiliary variables  must  have constant monomial\nshape functions (these are referred to as  elemental  variables, as the\nvalue is constant over each mesh element). This restriction is due to\nthe gradient of the streamfunction variable(s) being undefined for nodal  auxiliary variables (for example, those using linear Lagrange\nshape functions). An example of the input syntax for the 2D case is  [AuxVariables]\n  [./u]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./w]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n[]  For the 3D case, there is an additional horizontal velocity component\n( v ), so the input syntax is  [AuxVariables]\n  [./u]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./v]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./w]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n[]  The velocity components are calculated by  VelocityDDCAux  AuxKernels,\none for each component. For the 2D case, the input syntax is  [AuxKernels]\n  [./uAux]\n    type = VelocityDDCAux\n    variable = u\n    component = x\n    streamfunction_variable = streamfunction\n  [../]\n  [./wAux]\n    type = VelocityDDCAux\n    variable = w\n    component = y\n    streamfunction_variable = streamfunction\n  [../]\n[]  For the 3D case, three AuxKernels are required. Note that both\nstreamfunction variables must be given, in the correct order ($x$ then\n$y$). An example of the input syntax is  [AuxKernels]\n  [./uAux]\n    type = VelocityDDCAux\n    variable = u\n    component = x\n    streamfunction_variable = 'streamfunctionx streamfunctiony'\n  [../]\n  [./vAux]\n    type = VelocityDDCAux\n    variable = v\n    component = y\n    streamfunction_variable = 'streamfunctionx streamfunctiony'\n  [../]\n  [./wAux]\n    type = VelocityDDCAux\n    variable = w\n    component = z\n    streamfunction_variable = 'streamfunctionx streamfunctiony'\n  [../]\n[]", 
            "title": "Velocity components"
        }, 
        {
            "location": "/example2D/", 
            "text": "2D examples\n\n\nIsotropic models\n\n\nThe first 2D example is for an isotropic porous medium ($\\gamma = 1$). A\nworking example of this example can be found at\n\nhttps://github.com/cpgr/numbat/blob/master/examples/2D/isotropic/2Dddc.i\n.\n\n\nInput file\n\n\nThe complete input file for this problem is\n\n\n[Mesh]\n  type = GeneratedMesh\n  dim = 2\n  xmax = 1000\n  ymin = -200\n  ymax = 0\n  nx = 80\n  ny = 20\n  bias_y = 0.7\n[]\n\n[Adaptivity]\n  marker = combomarker\n  max_h_level = 1\n  initial_marker = boxmarker\n  initial_steps = 1\n  [./Indicators]\n    [./gradjumpindicator]\n      type = GradientJumpIndicator\n      variable = concentration\n    [../]\n  [../]\n  [./Markers]\n    [./errormarker]\n      type = ErrorToleranceMarker\n      refine = 0.005\n      indicator = gradjumpindicator\n    [../]\n    [./boxmarker]\n      type = BoxMarker\n      bottom_left = '0 -1.0 0'\n      top_right = '1000 0 0'\n      inside = refine\n      outside = dont_mark\n    [../]\n    [./combomarker]\n      type = ComboMarker\n      markers = 'boxmarker errormarker'\n    [../]\n  [../]\n[]\n\n[Variables]\n  [./concentration]\n    order = FIRST\n    family = LAGRANGE\n    [./InitialCondition]\n      type = PerturbationIC\n      variable = concentration\n      amplitude = 0.02\n      seed = 1\n    [../]\n  [../]\n  [./streamfunction]\n    order = FIRST\n    family = LAGRANGE\n    initial_condition = 0.0\n  [../]\n[]\n\n[Kernels]\n  [./TwoDDarcyDDC]\n    type = DarcyDDC\n    variable = streamfunction\n    concentration_variable = concentration\n  [../]\n  [./TwoDConvectionDiffusionDDC]\n    type = ConvectionDiffusionDDC\n    variable = concentration\n    streamfunction_variable = streamfunction\n    coeff_tensor = '1 0 0 0 1 0 0 0 1'\n  [../]\n  [./TimeDerivative]\n    type = TimeDerivative\n    variable = concentration\n  [../]\n[]\n\n[AuxVariables]\n  [./u]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./w]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n[]\n\n[AuxKernels]\n  [./uAux]\n    type = VelocityDDCAux\n    variable = u\n    component = x\n    streamfunction_variable = streamfunction\n  [../]\n  [./wAux]\n    type = VelocityDDCAux\n    variable = w\n    component = y\n    streamfunction_variable = streamfunction\n  [../]\n[]\n\n[BCs]\n  [./conctop]\n    type = DirichletBC\n    variable = concentration\n    boundary = top\n    value = 1.0\n  [../]\n  [./streamfuntop]\n    type = DirichletBC\n    variable = streamfunction\n    boundary = top\n    value = 0.0\n  [../]\n  [./streamfunbottom]\n    type = DirichletBC\n    variable = streamfunction\n    boundary = bottom\n    value = 0.0\n  [../]\n  [./Periodic]\n    [./x]\n      variable = 'concentration streamfunction'\n      auto_direction = x\n    [../]\n  [../]\n[]\n\n[Executioner]\n  type = Transient\n  dtmax = 100\n  end_time = 2500\n  start_time = 1\n  solve_type = PJFNK\n  nl_abs_tol = 1e-10\n  [./TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 1\n    cutback_factor = 0.5\n    growth_factor = 2\n  [../]\n  [./TimeIntegrator]\n    type = LStableDirk2\n  [../]\n[]\n\n[Postprocessors]\n  [./boundaryfluxint]\n    type = SideFluxIntegral\n    variable = concentration\n    boundary = top\n    diffusivity = 1\n  [../]\n  [./numdofs]\n    type = NumDOFs\n  [../]\n[]\n\n[Preconditioning]\n  [./smp]\n    type = SMP\n    full = true\n  [../]\n[]\n\n[Outputs]\n  [./console]\n    type = Console\n    perf_log = true\n    output_nonlinear = true\n  [../]\n  [./exodus]\n    type = Exodus\n    file_base = 2Dddc\n    execute_on = 'INITIAL TIMESTEP_END'\n  [../]\n  [./csvoutput]\n    type = CSV\n    file_base = 2Dddc\n    execute_on = 'INITIAL TIMESTEP_END'\n  [../]\n[]\n\n\n\nRunning the example\n\n\nThis example can be run on the commandline using\n\n\nnumbat-opt -i 2Dddc.i\n\n\n\nAlternatively, this file can be run using the \nPeacock\n gui provided by\nMOOSE using\n\n\npeacock -i 2Dddc.i\n\n\n\nin the directory where \n2Dddc.i\n resides.\n\n\nResults\n\n\nThis 2D example should take only a few minutes to run to completion,\nproducing a concentration profile similar to that presented in Figure @fig:2D,\nwhere several downwelling plumes of high concentration can be observed:\n\n\n{#fig:2D}\n\n\n Note that due to the random perturbation applied to the initial\nconcentration profile, the geometry of the concentration profile\nobtained will differ from run to run.\n\n\nThe flux over the top boundary is of particular interest in many cases\n(especially convective mixing of $\\textrm{CO}_2$). This is calculated in\nthis example file using the \nboundaryfluxint\n postprocessor in the input\nfile, and presented in Figure @fig:2Dflux.\n\n\n{#fig:2Dflux}\n\n\n Initially, the flux is purely diffusive, and scales as\n$1 / \\sqrt(\\pi t)$, where $t$ is time (shown as the dashed green line).\nAfter some time, the convective instability becomes sufficiently strong,\nat which point the flux across the top boundary rapidly increases (at a\ntime of approximately 1,500 seconds).\n\n\nAnisotropic models\n\n\nThe second 2D example is for an anisotropic porous medium with\n$\\gamma = 0.5$ (ie., the vertical permeability is half of the horizontal\npermeability). A working example of this example can be found at\n\nhttps://github.com/cpgr/numbat/blob/master/examples/2D/anisotropic/2Dddc2.i\n.\n\n\nInput file", 
            "title": "2D example"
        }, 
        {
            "location": "/example2D/#2d-examples", 
            "text": "", 
            "title": "2D examples"
        }, 
        {
            "location": "/example2D/#isotropic-models", 
            "text": "The first 2D example is for an isotropic porous medium ($\\gamma = 1$). A\nworking example of this example can be found at https://github.com/cpgr/numbat/blob/master/examples/2D/isotropic/2Dddc.i .", 
            "title": "Isotropic models"
        }, 
        {
            "location": "/example2D/#input-file", 
            "text": "The complete input file for this problem is  [Mesh]\n  type = GeneratedMesh\n  dim = 2\n  xmax = 1000\n  ymin = -200\n  ymax = 0\n  nx = 80\n  ny = 20\n  bias_y = 0.7\n[]\n\n[Adaptivity]\n  marker = combomarker\n  max_h_level = 1\n  initial_marker = boxmarker\n  initial_steps = 1\n  [./Indicators]\n    [./gradjumpindicator]\n      type = GradientJumpIndicator\n      variable = concentration\n    [../]\n  [../]\n  [./Markers]\n    [./errormarker]\n      type = ErrorToleranceMarker\n      refine = 0.005\n      indicator = gradjumpindicator\n    [../]\n    [./boxmarker]\n      type = BoxMarker\n      bottom_left = '0 -1.0 0'\n      top_right = '1000 0 0'\n      inside = refine\n      outside = dont_mark\n    [../]\n    [./combomarker]\n      type = ComboMarker\n      markers = 'boxmarker errormarker'\n    [../]\n  [../]\n[]\n\n[Variables]\n  [./concentration]\n    order = FIRST\n    family = LAGRANGE\n    [./InitialCondition]\n      type = PerturbationIC\n      variable = concentration\n      amplitude = 0.02\n      seed = 1\n    [../]\n  [../]\n  [./streamfunction]\n    order = FIRST\n    family = LAGRANGE\n    initial_condition = 0.0\n  [../]\n[]\n\n[Kernels]\n  [./TwoDDarcyDDC]\n    type = DarcyDDC\n    variable = streamfunction\n    concentration_variable = concentration\n  [../]\n  [./TwoDConvectionDiffusionDDC]\n    type = ConvectionDiffusionDDC\n    variable = concentration\n    streamfunction_variable = streamfunction\n    coeff_tensor = '1 0 0 0 1 0 0 0 1'\n  [../]\n  [./TimeDerivative]\n    type = TimeDerivative\n    variable = concentration\n  [../]\n[]\n\n[AuxVariables]\n  [./u]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./w]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n[]\n\n[AuxKernels]\n  [./uAux]\n    type = VelocityDDCAux\n    variable = u\n    component = x\n    streamfunction_variable = streamfunction\n  [../]\n  [./wAux]\n    type = VelocityDDCAux\n    variable = w\n    component = y\n    streamfunction_variable = streamfunction\n  [../]\n[]\n\n[BCs]\n  [./conctop]\n    type = DirichletBC\n    variable = concentration\n    boundary = top\n    value = 1.0\n  [../]\n  [./streamfuntop]\n    type = DirichletBC\n    variable = streamfunction\n    boundary = top\n    value = 0.0\n  [../]\n  [./streamfunbottom]\n    type = DirichletBC\n    variable = streamfunction\n    boundary = bottom\n    value = 0.0\n  [../]\n  [./Periodic]\n    [./x]\n      variable = 'concentration streamfunction'\n      auto_direction = x\n    [../]\n  [../]\n[]\n\n[Executioner]\n  type = Transient\n  dtmax = 100\n  end_time = 2500\n  start_time = 1\n  solve_type = PJFNK\n  nl_abs_tol = 1e-10\n  [./TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 1\n    cutback_factor = 0.5\n    growth_factor = 2\n  [../]\n  [./TimeIntegrator]\n    type = LStableDirk2\n  [../]\n[]\n\n[Postprocessors]\n  [./boundaryfluxint]\n    type = SideFluxIntegral\n    variable = concentration\n    boundary = top\n    diffusivity = 1\n  [../]\n  [./numdofs]\n    type = NumDOFs\n  [../]\n[]\n\n[Preconditioning]\n  [./smp]\n    type = SMP\n    full = true\n  [../]\n[]\n\n[Outputs]\n  [./console]\n    type = Console\n    perf_log = true\n    output_nonlinear = true\n  [../]\n  [./exodus]\n    type = Exodus\n    file_base = 2Dddc\n    execute_on = 'INITIAL TIMESTEP_END'\n  [../]\n  [./csvoutput]\n    type = CSV\n    file_base = 2Dddc\n    execute_on = 'INITIAL TIMESTEP_END'\n  [../]\n[]", 
            "title": "Input file"
        }, 
        {
            "location": "/example2D/#running-the-example", 
            "text": "This example can be run on the commandline using  numbat-opt -i 2Dddc.i  Alternatively, this file can be run using the  Peacock  gui provided by\nMOOSE using  peacock -i 2Dddc.i  in the directory where  2Dddc.i  resides.", 
            "title": "Running the example"
        }, 
        {
            "location": "/example2D/#results", 
            "text": "This 2D example should take only a few minutes to run to completion,\nproducing a concentration profile similar to that presented in Figure @fig:2D,\nwhere several downwelling plumes of high concentration can be observed:  {#fig:2D}   Note that due to the random perturbation applied to the initial\nconcentration profile, the geometry of the concentration profile\nobtained will differ from run to run.  The flux over the top boundary is of particular interest in many cases\n(especially convective mixing of $\\textrm{CO}_2$). This is calculated in\nthis example file using the  boundaryfluxint  postprocessor in the input\nfile, and presented in Figure @fig:2Dflux.  {#fig:2Dflux}   Initially, the flux is purely diffusive, and scales as\n$1 / \\sqrt(\\pi t)$, where $t$ is time (shown as the dashed green line).\nAfter some time, the convective instability becomes sufficiently strong,\nat which point the flux across the top boundary rapidly increases (at a\ntime of approximately 1,500 seconds).", 
            "title": "Results"
        }, 
        {
            "location": "/example2D/#anisotropic-models", 
            "text": "The second 2D example is for an anisotropic porous medium with\n$\\gamma = 0.5$ (ie., the vertical permeability is half of the horizontal\npermeability). A working example of this example can be found at https://github.com/cpgr/numbat/blob/master/examples/2D/anisotropic/2Dddc2.i .", 
            "title": "Anisotropic models"
        }, 
        {
            "location": "/example2D/#input-file_1", 
            "text": "", 
            "title": "Input file"
        }, 
        {
            "location": "/example3D/", 
            "text": "3D example\n\n\nA working example of a 3D problem can be found at\n\nhttps://github.com/cpgr/numbat/blob/master/examples/3D/isotropic/3Dddc.i\n.\n\n\nInput file\n\n\nThe complete input file for this problem is\n\n\n[Mesh]\n  type = GeneratedMesh\n  dim = 3\n  xmax = 500\n  ymax = 500\n  zmin = -200\n  zmax = 0\n  nx = 40\n  ny = 40\n  nz = 20\n  bias_z = 0.7\n[]\n\n[Adaptivity]\n  max_h_level = 1\n  initial_marker = boxmarker\n  initial_steps = 1\n  marker = combomarker\n  [./Indicators]\n    [./gradjumpindicator]\n      type = GradientJumpIndicator\n      variable = concentration\n    [../]\n  [../]\n  [./Markers]\n    [./errormarker]\n      type = ErrorToleranceMarker\n      refine = 0.05\n      indicator = gradjumpindicator\n    [../]\n    [./boxmarker]\n      type = BoxMarker\n      bottom_left = '0 0 -10'\n      top_right = '500 500 0'\n      inside = refine\n      outside = dont_mark\n    [../]\n    [./combomarker]\n      type = ComboMarker\n      markers = 'boxmarker errormarker'\n    [../]\n  [../]\n[]\n\n[Variables]\n  [./concentration]\n    order = FIRST\n    family = LAGRANGE\n    [./InitialCondition]\n      type = PerturbationIC\n      variable = concentration\n      amplitude = 0.02\n      seed = 1\n    [../]\n  [../]\n  [./streamfunctionx]\n    order = FIRST\n    family = LAGRANGE\n    initial_condition = 0.0\n  [../]\n  [./streamfunctiony]\n    order = FIRST\n    family = LAGRANGE\n    initial_condition = 0.0\n  [../]\n[]\n\n[Kernels]\n  [./ThreeDDarcyDDCx]\n    type = DarcyDDC\n    variable = streamfunctionx\n    concentration_variable = concentration\n    component = x\n  [../]\n  [./ThreeDDarcyDDCy]\n    type = DarcyDDC\n    variable = streamfunctiony\n    concentration_variable = concentration\n    component = y\n  [../]\n  [./ThreeDConvectionDiffusionDDC]\n    type = ConvectionDiffusionDDC\n    variable = concentration\n    streamfunction_variable = 'streamfunctionx streamfunctiony'\n    coeff_tensor = '1 0 0 0 1 0 0 0 1'\n  [../]\n  [./TimeDerivative]\n    type = TimeDerivative\n    variable = concentration\n  [../]\n[]\n\n[AuxVariables]\n  [./u]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./v]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./w]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n[]\n\n[AuxKernels]\n  [./uAux]\n    type = VelocityDDCAux\n    variable = u\n    component = x\n    streamfunction_variable = 'streamfunctionx streamfunctiony'\n  [../]\n  [./vAux]\n    type = VelocityDDCAux\n    variable = v\n    component = y\n    streamfunction_variable = 'streamfunctionx streamfunctiony'\n  [../]\n  [./wAux]\n    type = VelocityDDCAux\n    variable = w\n    component = z\n    streamfunction_variable = 'streamfunctionx streamfunctiony'\n  [../]\n[]\n\n[BCs]\n  [./conctop]\n    type = DirichletBC\n    variable = concentration\n    boundary = front\n    value = 1.0\n  [../]\n  [./streamfunxtop]\n    type = DirichletBC\n    variable = streamfunctionx\n    boundary = front\n    value = 0.0\n  [../]\n  [./streamfunxbottom]\n    type = DirichletBC\n    variable = streamfunctionx\n    boundary = back\n    value = 0.0\n  [../]\n  [./streamfunytop]\n    type = DirichletBC\n    variable = streamfunctiony\n    boundary = front\n    value = 0.0\n  [../]\n  [./streamfunybottom]\n    type = DirichletBC\n    variable = streamfunctiony\n    boundary = back\n    value = 0.0\n  [../]\n  [./Periodic]\n    [./xy]\n      variable = 'concentration streamfunctionx streamfunctiony'\n      auto_direction = 'x y'\n    [../]\n  [../]\n[]\n\n[Preconditioning]\n  [./smp]\n    type = SMP\n    full = true\n  [../]\n[]\n\n[Executioner]\n  type = Transient\n  dtmax = 100\n  end_time = 2500\n  start_time = 1\n  solve_type = PJFNK\n  nl_abs_tol = 1e-10\n  petsc_options = -snes_ksp_ew\n  [./TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 1\n    cutback_factor = 0.5\n    growth_factor = 2\n  [../]\n  [./TimeIntegrator]\n    type = LStableDirk2\n  [../]\n[]\n\n[Postprocessors]\n  [./boundaryfluxint]\n    type = SideFluxIntegral\n    variable = concentration\n    boundary = front\n    diffusivity = 1\n  [../]\n  [./numdofs]\n    type = NumDOFs\n  [../]\n[]\n\n[Outputs]\n  [./console]\n    type = Console\n    perf_log = true\n    output_nonlinear = true\n    output_linear = true\n  [../]\n  [./exodus]\n    type = Exodus\n    file_base = 3Dddc\n    execute_on = 'INITIAL TIMESTEP_END'\n  [../]\n  [./csvoutput]\n    type = CSV\n    file_base = 3Dddc\n    execute_on = 'INITIAL TIMESTEP_END'\n  [../]\n[]\n\n\n\nRunning the example\n\n\nNote:\n This example should \nnot\n be run on a laptop or workstation\ndue to the large computational requirements. Do \nnot\n run this using\nthe \nPeacock\n gui provided by MOOSE.\n\n\nExamples of the total run times for this problem on a cluster are over\n27 hours for a single processor down to only 30 minutes using 100\nprocessors in parallel.\n\n\nResults\n\n\nThis 3D example should produce a concentration profile similar to that\npresented in Figure @fig:3D, where several downwelling plumes of high\nconcentration can be observed:\n\n\n{#fig:3D}\n\n\n Note that due to the random perturbation applied to the initial\nconcentration profile, the geometry of the concentration profile\nobtained will differ from run to run.\n\n\nThe flux over the top surface is of particular interest in many cases\n(especially convective mixing of $\\textrm{CO}_2$). This is calculated in\nthis example file using the \nboundaryfluxint\n postprocessor in the input\nfile, and presented in Figure @fig:3Dflux.\n\n\n{#fig:3Dflux}\n\n\n Initially, the flux is purely diffusive, and scales as\n$1 / \\sqrt(\\pi t)$, where $t$ is time (shown as the dashed green line).\nAfter some time, the convective instability becomes sufficiently strong,\nat which point the flux across the top boundary rapidly increases (at a\ntime of approximately 1,700 seconds). Also shown for comparison is the\nflux for the 2D example. It is apparent that the 3D model leads in a\nslower onset of convection (the time where the flux first increases from\nthe diffusive rate).", 
            "title": "3D example"
        }, 
        {
            "location": "/example3D/#3d-example", 
            "text": "A working example of a 3D problem can be found at https://github.com/cpgr/numbat/blob/master/examples/3D/isotropic/3Dddc.i .", 
            "title": "3D example"
        }, 
        {
            "location": "/example3D/#input-file", 
            "text": "The complete input file for this problem is  [Mesh]\n  type = GeneratedMesh\n  dim = 3\n  xmax = 500\n  ymax = 500\n  zmin = -200\n  zmax = 0\n  nx = 40\n  ny = 40\n  nz = 20\n  bias_z = 0.7\n[]\n\n[Adaptivity]\n  max_h_level = 1\n  initial_marker = boxmarker\n  initial_steps = 1\n  marker = combomarker\n  [./Indicators]\n    [./gradjumpindicator]\n      type = GradientJumpIndicator\n      variable = concentration\n    [../]\n  [../]\n  [./Markers]\n    [./errormarker]\n      type = ErrorToleranceMarker\n      refine = 0.05\n      indicator = gradjumpindicator\n    [../]\n    [./boxmarker]\n      type = BoxMarker\n      bottom_left = '0 0 -10'\n      top_right = '500 500 0'\n      inside = refine\n      outside = dont_mark\n    [../]\n    [./combomarker]\n      type = ComboMarker\n      markers = 'boxmarker errormarker'\n    [../]\n  [../]\n[]\n\n[Variables]\n  [./concentration]\n    order = FIRST\n    family = LAGRANGE\n    [./InitialCondition]\n      type = PerturbationIC\n      variable = concentration\n      amplitude = 0.02\n      seed = 1\n    [../]\n  [../]\n  [./streamfunctionx]\n    order = FIRST\n    family = LAGRANGE\n    initial_condition = 0.0\n  [../]\n  [./streamfunctiony]\n    order = FIRST\n    family = LAGRANGE\n    initial_condition = 0.0\n  [../]\n[]\n\n[Kernels]\n  [./ThreeDDarcyDDCx]\n    type = DarcyDDC\n    variable = streamfunctionx\n    concentration_variable = concentration\n    component = x\n  [../]\n  [./ThreeDDarcyDDCy]\n    type = DarcyDDC\n    variable = streamfunctiony\n    concentration_variable = concentration\n    component = y\n  [../]\n  [./ThreeDConvectionDiffusionDDC]\n    type = ConvectionDiffusionDDC\n    variable = concentration\n    streamfunction_variable = 'streamfunctionx streamfunctiony'\n    coeff_tensor = '1 0 0 0 1 0 0 0 1'\n  [../]\n  [./TimeDerivative]\n    type = TimeDerivative\n    variable = concentration\n  [../]\n[]\n\n[AuxVariables]\n  [./u]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./v]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n  [./w]\n    order = CONSTANT\n    family = MONOMIAL\n  [../]\n[]\n\n[AuxKernels]\n  [./uAux]\n    type = VelocityDDCAux\n    variable = u\n    component = x\n    streamfunction_variable = 'streamfunctionx streamfunctiony'\n  [../]\n  [./vAux]\n    type = VelocityDDCAux\n    variable = v\n    component = y\n    streamfunction_variable = 'streamfunctionx streamfunctiony'\n  [../]\n  [./wAux]\n    type = VelocityDDCAux\n    variable = w\n    component = z\n    streamfunction_variable = 'streamfunctionx streamfunctiony'\n  [../]\n[]\n\n[BCs]\n  [./conctop]\n    type = DirichletBC\n    variable = concentration\n    boundary = front\n    value = 1.0\n  [../]\n  [./streamfunxtop]\n    type = DirichletBC\n    variable = streamfunctionx\n    boundary = front\n    value = 0.0\n  [../]\n  [./streamfunxbottom]\n    type = DirichletBC\n    variable = streamfunctionx\n    boundary = back\n    value = 0.0\n  [../]\n  [./streamfunytop]\n    type = DirichletBC\n    variable = streamfunctiony\n    boundary = front\n    value = 0.0\n  [../]\n  [./streamfunybottom]\n    type = DirichletBC\n    variable = streamfunctiony\n    boundary = back\n    value = 0.0\n  [../]\n  [./Periodic]\n    [./xy]\n      variable = 'concentration streamfunctionx streamfunctiony'\n      auto_direction = 'x y'\n    [../]\n  [../]\n[]\n\n[Preconditioning]\n  [./smp]\n    type = SMP\n    full = true\n  [../]\n[]\n\n[Executioner]\n  type = Transient\n  dtmax = 100\n  end_time = 2500\n  start_time = 1\n  solve_type = PJFNK\n  nl_abs_tol = 1e-10\n  petsc_options = -snes_ksp_ew\n  [./TimeStepper]\n    type = IterationAdaptiveDT\n    dt = 1\n    cutback_factor = 0.5\n    growth_factor = 2\n  [../]\n  [./TimeIntegrator]\n    type = LStableDirk2\n  [../]\n[]\n\n[Postprocessors]\n  [./boundaryfluxint]\n    type = SideFluxIntegral\n    variable = concentration\n    boundary = front\n    diffusivity = 1\n  [../]\n  [./numdofs]\n    type = NumDOFs\n  [../]\n[]\n\n[Outputs]\n  [./console]\n    type = Console\n    perf_log = true\n    output_nonlinear = true\n    output_linear = true\n  [../]\n  [./exodus]\n    type = Exodus\n    file_base = 3Dddc\n    execute_on = 'INITIAL TIMESTEP_END'\n  [../]\n  [./csvoutput]\n    type = CSV\n    file_base = 3Dddc\n    execute_on = 'INITIAL TIMESTEP_END'\n  [../]\n[]", 
            "title": "Input file"
        }, 
        {
            "location": "/example3D/#running-the-example", 
            "text": "Note:  This example should  not  be run on a laptop or workstation\ndue to the large computational requirements. Do  not  run this using\nthe  Peacock  gui provided by MOOSE.  Examples of the total run times for this problem on a cluster are over\n27 hours for a single processor down to only 30 minutes using 100\nprocessors in parallel.", 
            "title": "Running the example"
        }, 
        {
            "location": "/example3D/#results", 
            "text": "This 3D example should produce a concentration profile similar to that\npresented in Figure @fig:3D, where several downwelling plumes of high\nconcentration can be observed:  {#fig:3D}   Note that due to the random perturbation applied to the initial\nconcentration profile, the geometry of the concentration profile\nobtained will differ from run to run.  The flux over the top surface is of particular interest in many cases\n(especially convective mixing of $\\textrm{CO}_2$). This is calculated in\nthis example file using the  boundaryfluxint  postprocessor in the input\nfile, and presented in Figure @fig:3Dflux.  {#fig:3Dflux}   Initially, the flux is purely diffusive, and scales as\n$1 / \\sqrt(\\pi t)$, where $t$ is time (shown as the dashed green line).\nAfter some time, the convective instability becomes sufficiently strong,\nat which point the flux across the top boundary rapidly increases (at a\ntime of approximately 1,700 seconds). Also shown for comparison is the\nflux for the 2D example. It is apparent that the 3D model leads in a\nslower onset of convection (the time where the flux first increases from\nthe diffusive rate).", 
            "title": "Results"
        }, 
        {
            "location": "/references/", 
            "text": "References\n\n\nE, W. and Liu, J. G., \nFinite difference methods for 3D viscous\nincompressible flows in the vorticity-vector potential formulation on\nnonstaggered grids\n, J. Comp. Phys., 138, 57--82 (1997)\n\n\n\nEnnis-King, J. and Paterson, L., \nRole of convective mixing in the\nlong-term storage of carbon dioxide in deep saline aquifers\n, SPE J.,\n10, 349--356 (2005) \n\n\nSlim, A.C., \nSolutal-convection regimes in a two-dimensional porous\nmedium\n, J. Fluid Mech., 741, 461--491 (2014)", 
            "title": "References"
        }, 
        {
            "location": "/references/#references", 
            "text": "E, W. and Liu, J. G.,  Finite difference methods for 3D viscous\nincompressible flows in the vorticity-vector potential formulation on\nnonstaggered grids , J. Comp. Phys., 138, 57--82 (1997)  Ennis-King, J. and Paterson, L.,  Role of convective mixing in the\nlong-term storage of carbon dioxide in deep saline aquifers , SPE J.,\n10, 349--356 (2005)   Slim, A.C.,  Solutal-convection regimes in a two-dimensional porous\nmedium , J. Fluid Mech., 741, 461--491 (2014)", 
            "title": "References"
        }, 
        {
            "location": "/download/", 
            "text": "Numbat user's guide\n\n\nThe documentation contained in this site is also available as a pdf file:\n\nNumbat user's guide", 
            "title": "Download PDF"
        }, 
        {
            "location": "/download/#numbat-users-guide", 
            "text": "The documentation contained in this site is also available as a pdf file: Numbat user's guide", 
            "title": "Numbat user's guide"
        }
    ]
}